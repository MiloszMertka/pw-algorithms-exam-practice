Pair<Map<Vertex, Double>, Map<Vertex, Vertex>> Dijkstra(Graph graph, Vertex source) {
	Map<Vertex, Double> distances = new HashMap<>();
	Map<Vertex, Vertex> predecessors = new HashMap<>();
	Set<Vertex> visited = new HashSet<>();
	PriorityQueue<Vertex> pq = new MinPriorityQueue<>();
	
	for (Vertex vertex : graph.getVertices()) {
		distances.put(vertex, Double.INFINITY);
		predecessors.put(vertex, null);

		if (vertex != source) {
			pq.put(vertex);
		}
	}

	distances.put(source, 0);

	while (!pq.isEmpty())  {
		Vertex vertex = pq.pop();
		List<Vertex> neighbours = getNeighbours(vertex, graph);

		for (Vertex neighbour : neighbours) {
			if (!visited.contains(neighbour)) {
				visited.add(neighbour);
				Double distance = distances.get(vertex) + edgeWeight(vertex, neighbour, graph);

				if (distance < distances.get(neighbour)) {
					distances.put(neighbour, distance);
					predecessors.put(neighbour, vertex);
				}
			}
		}
	}

	return new Pair<>(distances, predecessors);
}